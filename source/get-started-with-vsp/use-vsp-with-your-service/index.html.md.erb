---
title: Use the VSP with your service
weight: 10
---

# Use the VSP with your service

This tutorial explains how to integrate with the VSP in your local environment.

The tutorial uses the GOV.UK Verify test tool as a placeholder for the GOV.UK Verify Hub. This allows you to follow the tutorial using your local VSP setup.

You will find out how to:

- initialise the test tool
- send a request
- handle the response in all scenarios

![](/images/vsp-integration-overview.svg)

## Prerequisites

To be able to follow this tutorial you must have:

* Java 8 or higher
* [set up the VSP](https://github.com/alphagov/verify-service-provider/blob/master/README.md)

You can check if your VSP is set up correctly by doing a GET request to the `admin/healthcheck` endpoint.

**What does a response look like? New page for troubleshooting?**

## Initialise the test tool

The test tool allows you to test and prove that your service can respond appropriately to all of the response scenarios in a Verify journey.

The test tool is hosted by the GOV.UK Verify team and must be initialised before you start development.

The (VSP) automates the initialisation of the test tool so you can focus on integrating your service with the VSP. Each initialisation spins up a test tool instance which has a lifetime of **HOW LONG**.

![](/images/vsp-integration-initialise-test-tool.svg)

To initialise the test tool:

```
WHAT TO DO?
```

This command:

- generates self-signed keys and certificates for the test tool
- starts the VSP configured with the new keys and the URL of the test tool
- initialises an instance of the test tool

You can now use the test tool.

## Send a request

Once the user starts a Verify journey from the browser, your service must POST a request to the VSP to generate the SAML AuthnRequest. Then, your service must send the SAML AuthnRequest to the test tool via the browser.

![](/images/vsp-integration-request.svg)

### Generate an AuthnRequest

Make a POST request to the `/generate-request` endpoint to generate a SAML `AuthnRequest`. The request body must contain the [level of assurance][loa] for your service:

```
> POST /generate-request HTTP/1.1
> Content-Type: application/json
>
> { "levelOfAssurance": "LEVEL_2" }
```

The response from the VSP is in JSON format, and contains the SAML AuthnRequest:

```json
{
    "samlRequest": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOkF1dGhuUmVxdWVzdCB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgRGVzdGluYXRpb249Imh0dHBzOi8vY29tc...",
    "requestId": "_f43aa274-9395-45dd-aaef-25f56f49084e",
    "ssoLocation": "https://compliance-tool-reference.ida.digital.cabinet-office.gov.uk/SAML2/SSO"
}
```

The parts of the response are:

| Field         | Description                                            |
| ------------- | ------------------------------------------------------ |
| `samlRequest` | Your base64 encoded SAML `AuthnRequest`                |
| `requestId`   | A string that identifies the SAML `AuthnRequest`       |
| `ssoLocation` | The URL to send the `AuthnRequest` to. In this case this is the URL of the test tool. |

#### Store the requestId

You will need to access the `requestId` later in the process to link the identities received from GOV.UK Verify with the correct user.

You must store the `requestId` securely and link it to the user's session. We recommend you store the `requestId` in a secure cookie.

### Send the AuthnRequest to the test tool

After receiving the AuthnRequest, your service sends it to the test tool via the browser. We recommend you do this by rendering an HTML form and using JavaScript to auto-submit it, as described by [SAML HTTP Post Binding](https://en.wikipedia.org/wiki/SAML_2.0#HTTP_POST_Binding) [external link]:

```html
<!-- The form containing the SAML AuthnRequest
to be submitted to the test tool -->
<form method='post' action='${escape(ssoLocation)}'>
  <h1>Continue to next step</h1>
  <p>Because Javascript is not enabled on your browser, you must press the continue button</p>
  <input type='hidden' name='SAMLRequest' value='${escape(samlRequest)}'/>
  <input type='hidden' name='relayState' value=''/>
  <button>Continue</button>
</form>

<!-- JavaScript to automatically submit the form
and POST to `ssoLocation` -->
<script>
  var form = document.forms[0]
  form.setAttribute('style', 'display: none;')
  window.setTimeout(function () { form.removeAttribute('style') }, 5000)
  form.submit()
</script>
```
Make sure to escape inputs so that special characters are not processed.

For a consistent user journey, we recommend you also include page styling matching the appearance of your service. The styling is for the page that appear if a user has JavaScript disabled. This page prompts users to turn on JavaScript and should look like your service.

### Response from the test tool

The response from the test tool should contain `"status": "PASSED"` and a `responseGeneratorLocation` URL which you can use to access the test scenarios:

```json
  {
    "status": {
      "status": "PASSED",
      "message": null
    },
    "responseGeneratorLocation": "https://compliance-tool-reference.ida.digital.cabinet-office.gov.uk:443/rp-test/_5178cb11-bc5a-4124-8c61-f8bac98e1db6"
  }
```

If the status is not `PASSED`, you may need to re-initialise the test tool.

## Choose scenario

![](/images/vsp-integration-choose-scenario.svg)

Go to the URL in `responseGeneratorLocation` using your browser. The response will contain the test scenarios for possible responses.

Example test scenarios from the test tool


```json
{
  "id" : "_6817b389-4924-479c-9851-db089c4e639c",
  "testCases" : [ {
    "executeUri" : "https://compliance-tool-reference.ida.digital.cabinet-office.gov.uk:443/rp-test/_6817b389-4924-479c-9851-db089c4e639c/test-non-matching/10",
    "id" : 10,
    "title" : "Verified User On Service With Non Match Setting",
    "description" : "Issues a successful response where the user has been successfully verified."
  }, {
    "executeUri" : "https://compliance-tool-reference.ida.digital.cabinet-office.gov.uk:443/rp-test/_6817b389-4924-479c-9851-db089c4e639c/test-non-matching/11",
    "id" : 11,
    "title" : "No Authentication Context Response With Non Match Setting",
    "description" : "Issues a response with NoAuthnContext status. This happens when the user cancels or fails to authenticate at an appropriate level of assurance."
  }, {
    "executeUri" : "https://compliance-tool-reference.ida.digital.cabinet-office.gov.uk:443/rp-test/_6817b389-4924-479c-9851-db089c4e639c/test-non-matching/13",
    "id" : 13,
    "title" : "Authentication Failed Response",
    "description" : "Issues an Authentication Failed response. The user was not authenticated successfully."
  }, {
    "executeUri" : "https://compliance-tool-reference.ida.digital.cabinet-office.gov.uk:443/rp-test/_6817b389-4924-479c-9851-db089c4e639c/test-non-matching/14",
    "id" : 14,
    "title" : "Fraudulent match response with assertions signed by hub",
    "description" : "Issues a response with an assertion signed with the hub's private key. Your service should return an error to the user because your service should only trust assertions signed by your matching service adapter."
  } ]
}
```

Access the URL for a particular scenario to test that your service can handle that particular response.

## Handle the response

![](/images/vsp-integration-response.svg)

The SAML Response will be submitted to the URL you specified when initialising the test tool, via the user's browser. For example, `passport-verify-stub-relying-party` uses `/verify/response`. The SAML Response will be URL form encoded, `application/x-www-form-urlencoded`.

<details>
<summary>
Example form body submitted from the user's browser
</summary>

```
SAMLResponse=PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHNhbWwycDpSZXNwb25zZSBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9wYXNzcG9ydC12ZXJpZnktc3R1Yi1yZWx5aW5nLXBhcnR5LWRldi5jbG91ZGFwcHMuZGlnaXRhbC92ZXJpZnkv...
```

</details>

### Translate the SAML Response into JSON

Send a POST request to `/translate-non-matching-response` to translate the SAML Response into JSON.

The call must contain:

* `samlResponse` - the base64 encoded SAML Response you received from the test tool
* `requestId` - the [string you stored](LINK) when the AuthnRequest was generated
* `levelOfAssurance` - to validate that the user meets the minimum level of assurance you have requested

```
> POST /translate-non-matching-response HTTP/1.1
> Content-Type: application/json
>
{
  "samlResponse" : "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOkF1dGhuUmVxdWVzdCB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgRGVzdGluYXRpb249Imh0dHBzOi8vY29tc...",
  "requestId" : "_64c90b35-154f-4e9f-a75b-3a58a6c55e8b",
  "levelOfAssurance" : "LEVEL_2"
}
```



```
> HTTP/1.1 200 OK
> Content-Type: application/json
>
{
    "scenario": "IDENTITY_VERIFIED",
    "pid": "etikgj3ewowe",
    "levelOfAssurance": "LEVEL_2",
    "attributes": pie
}
```

When you receive an HTTP 200 response, with one of 4 scenarios:

| Scenario | Description |
| --- | --- |
| IDENTITY_VERIFIED | The user successfully completed the Verify journey. |
| CANCELLATION | User opted to cancel verification at some point in their journey. Response will be empty. |
| AUTHENTICATION_FAILED | User could not be identified by identity provider. |
| REQUEST_ERROR | Internal error. Contact  idasupport@digital.cabinet-office.gov.uk. |

In the `IDENTITY_VERIFIED` scenario, the response will also contain:

* `pid` - a unique identifier for a user
* `levelOfAssurance` - the level of assurance the user verified at
* `attributes` - information about the user's identity

Your service can now use the provided identity or error messages to further guide the user in their journey in your service.

<%= partial "partials/links" %>
