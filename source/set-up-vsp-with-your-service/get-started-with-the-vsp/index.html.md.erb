---
title: Get started with the VSP
weight: 10
---

# Get started with the VSP

This tutorial explains how to integrate with the VSP in your local environment to do SAML magic (FIXME).

The tutorial uses the GOV.UK Verify test tool as a placeholder for the GOV.UK Verify Hub. __FIXME__: The test tool is hosted by the GOV.UK Verify team. This allows you to follow the tutorial using your local VSP setup.
The test tool allows you to test and prove that your service can respond appropriately to all of the response scenarios in a Verify journey.

You will find out how to:

- initialise the test tool
- send a request
- handle a response

## Prerequisites

To be able to follow this tutorial you must have [set up the VSP](https://github.com/alphagov/verify-service-provider/blob/master/README.md)

## Use the VSP with the test tool

You'll have to start the VSP in developer mode and specify the service endpoint where the test tool should send the responses to.

Starting the VSP automatically initialises the test tool so you can focus on integrating your service with the VSP. Each initialisation:

- generates self-signed keys and certificates for the test tool
- starts the VSP configured with the new keys and the URL of the test tool
- initialises an instance of the test tool

To initialise the test tool where the SAML responses will be sent to `http://localhost:8080` you can run:

```
./bin/verify-service-provider development -u localhost:8080
```

## Send a request

Once the user starts a Verify journey from the browser, your service must send a request to the VSP to generate the an authentication request (AKA SAML AutnRequest). Then, your service must send the authentication request to the test tool via the browser.

![](/images/vsp-integration-request.svg)

### Request to generate an authentication request

Make a HTTP POST request to the `/generate-request` endpoint to generate a SAML authentication request message (FIXME replace usages of AuthnRequest). The request body must contain the [level of assurance][loa] for your service:

```
> POST /generate-request HTTP/1.1
> Content-Type: application/json
>
> { "levelOfAssurance": "LEVEL_2" }
```

### Receive the SAML AuthnRequest

The response from the VSP is in JSON format, and contains the SAML AuthnRequest:

```json
{
    "samlRequest": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOkF1dGhuUmVxdWVzdCB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgRGVzdGluYXRpb249Imh0dHBzOi8vY29tc...",
    "requestId": "_f43aa274-9395-45dd-aaef-25f56f49084e",
    "ssoLocation": "https://compliance-tool-reference.ida.digital.cabinet-office.gov.uk/SAML2/SSO"
}
```

The parts of the response are:

| Field         | Description                                            |
| ------------- | ------------------------------------------------------ |
| `samlRequest` | Your base64 encoded SAML `AuthnRequest`                |
| `requestId`   | A string that identifies the SAML `AuthnRequest`       |
| `ssoLocation` | The URL to send the `AuthnRequest` to. In this case this is the URL of the test tool. |

#### Store the requestId

You will need to access the `requestId` later in the process to link the identities received from GOV.UK Verify with the correct user.

You must store the `requestId` securely and link it to the user's session. We recommend you store the `requestId` in a secure cookie.

### Send the AuthnRequest to the test tool

After receiving the AuthnRequest, your service sends it to the test tool via the browser. We recommend you do this by rendering an HTML form and using JavaScript to auto-submit it, as described by [SAML HTTP Post Binding](https://en.wikipedia.org/wiki/SAML_2.0#HTTP_POST_Binding) [external link]:

```html
<!-- The form containing the SAML AuthnRequest
to be submitted to the test tool -->
<form method='post' action='${escape(ssoLocation)}'>
  <h1>Continue to next step</h1>
  <p>Because Javascript is not enabled on your browser, you must press the continue button</p>
  <input type='hidden' name='SAMLRequest' value='${escape(samlRequest)}'/>
  <input type='hidden' name='relayState' value=''/>
  <button>Continue</button>
</form>

<!-- JavaScript to automatically submit the form
and POST to `ssoLocation` -->
<script>
  var form = document.forms[0]
  form.setAttribute('style', 'display: none;')
  window.setTimeout(function () { form.removeAttribute('style') }, 5000)
  form.submit()
</script>
```
Make sure to escape inputs so that special characters are not processed. In our example, we are using the Express framework's escape method when rendering the form.

For a consistent user journey, we recommend you also include page styling matching the appearance of your service. The styling is for the page that appears if a user has JavaScript disabled. This page prompts users to turn on JavaScript and should look like your service.

### Response from the test tool

After the form is submitted, the test tool response should contain `"status": "PASSED"` and a `responseGeneratorLocation` URL which you can use to access the test scenarios:

```json
  {
    "status": {
      "status": "PASSED",
      "message": null
    },
    "responseGeneratorLocation": "https://compliance-tool-reference.ida.digital.cabinet-office.gov.uk:443/rp-test/_5178cb11-bc5a-4124-8c61-f8bac98e1db6"
  }
```

If the status is not `PASSED` then you may need to restart the VSP.

## Handle your first response scenario

Go to the URL in `responseGeneratorLocation` using your browser. The JSON response contains the 4 test cases or scenarios your service must handle when live.

Here we'll focus on the first test case, which simulates a user who has been successfully verified:

```json
{
  "executeUri" : "https://compliance-tool-reference.ida.digital.cabinet-office.gov.uk:443/rp-test/_6817b389-4924-479c-9851-db089c4e639c/test-non-matching/10",
  "id" : 10,
  "title" : "FIXME",
  "description" : "Issues a successful response where the user has been successfully verified."
},
```
Each scenario is characterised by has a title, description, id, and a executeUri, which can be followed to run the scenarion. (FIXME I want to be a table)

| Parameter     | Description                       |
| ------------- | --------------------------------- |
| `executeUri`  | URI for running the test scenario |
| `id`          | Number identifying the scenario   |
| `title`       | The name of the scenario          |
| `Description` | Details about the scenario        |

### Run the scenario
Using your response find the scenario that has a title: blah and go to the `executeUri` location to run the scenario.

### Handle the response

![](/images/vsp-integration-response.svg)

The test tool will generate a SAML response that will be provided in a HTML form that when submitted will be sent to the URL you provided to the VSP when launching development mode.
Your service must be listening at that URL for the incoming form submission.
The SAML response will be base64 encoded within the `SAMLResponse` form parameter:

```
SAMLResponse=PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHNhbWwycDpSZXNwb25zZSBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9wYXNzcG9ydC12ZXJpZnktc3R1Yi1yZWx5aW5nLXBhcnR5LWRldi5jbG91ZGFwcHMuZGlnaXRhbC92ZXJpZnkv...
```

From your service, make a HTTP POST request to `/translate-response` to translate the SAML Response into JSON.

The request must contain:

* `samlResponse` - the base64 encoded SAML Response you received from the test tool
* `requestId` - the [string you stored](LINK) when the AuthnRequest was generated
* `levelOfAssurance` - to validate that the user meets the minimum level of assurance you have requested

```http
> POST /translate-response HTTP/1.1
> Content-Type: application/json
>
{
  "samlResponse" : "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOkF1dGhuUmVxdWVzdCB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgRGVzdGluYXRpb249Imh0dHBzOi8vY29tc...",
  "requestId" : "_64c90b35-154f-4e9f-a75b-3a58a6c55e8b",
  "levelOfAssurance" : "LEVEL_2"
}
```

An HTTP 200 response confirms the VSP translated the SAML response successfully and also contains details about the test scenario:

```http
> HTTP/1.1 200 OK
> Content-Type: application/json
>
{
    "scenario": "IDENTITY_VERIFIED",
    "pid": "etikgj3ewowe",
    "levelOfAssurance": "LEVEL_2",
    "attributes": pie
}
```

* `scenario` - name of the scenario **MORE**
* `pid` - a unique identifier for a user
* `levelOfAssurance` - the level of assurance the user verified at
* `attributes` - information about the user's identity

###Â Next Steps

- Handle other scenarios (no_authn_context, and authn_failed)
- Test with different identities:
    - levels of assurance
    - test your matching strategy
      - different user attribtues (variety of names)
      - historical attributes



**This needs updating**

| Scenario | Description |
| --- | --- |
| IDENTITY_VERIFIED | The user successfully completed the Verify journey. |
| NO_AUTHN_CONTEXT | User opted to cancel verification at some point in their journey. Response will be empty. |
| AUTHENTICATION_FAILED | User could not be identified by identity provider. |



Your service can now use the provided identity or error messages to further guide the user in their journey in your service.

<%= partial "partials/links" %>
